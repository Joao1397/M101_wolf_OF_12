/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  12
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#includeEtc "caseDicts/mesh/generation/snappyHexMeshDict.cfg"

// Steps to run
castellatedMesh true;
snap            true;
addLayers       true; 

geometry
{
    wolf // Name of the surface inside snappyHexMesh
    {
        type triSurfaceMesh;
        file "wolfExtruded.stl";
        regions
        {
            wolflocal // This is the name of the region or surface patch in the STL
            {
                  name wolf_wall; // User-defined patch name. This is the final name of the patch
            } 
        }
    }

    box 
    {
        type searchableBox;
        min (-100.0 -120.0 -50.0);
        max (100.0 120.0 150.0);
    }

};

// Settings for the castellatedMesh generation.
castellatedMeshControls
{
    maxLocalCells 100000;
    maxGlobalCells 2000000; 
    minRefinementCells 10;
    maxLoadUnbalance 0.10;
    nCellsBetweenLevels 3;

    // Explicit feature edge refinement
    features
    (
        {
            file "wolfExtruded.eMesh";
            level 2;
        }
    );

    // Surface based refinement
    refinementSurfaces
    {
        wolf
        {
            level (1 1); // Global Refinement

            // Optional region-wise level specification
            regions
            {
                wolflocal 
                {
                    level (2 4);
           		
                    patchInfo
            		{
                		type wall; 
                    } 
                }
            }

        }
    }
    //End of refinement surfaces

    resolveFeatureAngle 30; 

    planarAngle 30;

    // Region-wise refinement
    refinementRegions
    {
        box
        {
            mode inside;
            levels  (( 1 1 ));
        }
    }

    // Mesh Selection
    insidePoint (-100.0 0.0 50.0 ); 

    allowFreeStandingZoneFaces true;
}

// Settings for the snapping.
snapControls
{
    nSmoothPatch 3;
    tolerance 2.0;
    nSolveIter 30; // 50 // 100 max 
    nRelaxIter 5; // 10 // 20 max 

    // Feature snapping
    nFeatureSnapIter 10; // 20 // 100 max 
    implicitFeatureSnap false; 
    explicitFeatureSnap true;
    multiRegionFeatureSnap false;
}

// Settings for the layer addition.
addLayersControls
{
    //Global parameters
    relativeSizes true;
    expansionRatio 1.2;
    finalLayerThickness 0.5;
    minThickness 0.001;
    // firstLayerThickness 0.01;
    // maxThicknessToMedialRatio 0.6;

    layers
    {
        wolf_wall // This patch was created in the geometry section.
        {
            nSurfaceLayers 3;
        }
    }

    // Advanced settings
    nGrow 0;

    // Advanced settings
    featureAngle 130; // 330 max
    maxFaceThicknessRatio 0.5; // 1.0 max

    // Patch displacement
    nSmoothSurfaceNormals 1;
    nSmoothThickness 10;

    // Medial axis analysis
    minMedialAxisAngle 90;
    maxThicknessToMedialRatio 0.3;
    nSmoothNormals 3;
    nMedialAxisIter 10;

    // Mesh shrinking
    nSmoothDisplacement 90;
    slipFeatureAngle 30;
    nRelaxIter 5;
    nBufferCellsNoExtrude 0;
    nLayerIter 50;

    nRelaxedIter 20;
}

// Setting mesh quality settings
meshQualityControls
{
    #include "meshQualityDict"

    nSmoothScale 4;
    errorReduction 0.75;
}

/*
debugFlags
(
    mesh            // write intermediate meshes
    intersections   // write current mesh intersections as .obj files
    featureSeeds    // write information about explicit feature edge refinement
    attraction      // write attraction as .obj files
    layerInfo       // write information about layers
);
*/

writeFlags
(
    scalarLevels    // write volScalarField with cellLevel for postprocessing
    layerSets       // write cellSets, faceSets of faces in layer
    layerFields     // write volScalarField for layer coverage
);

mergeTolerance 1e-6;

// ************************************************************************* //
